import asyncio
import logging
from os import getenv

import aiohttp
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=getenv("TG_BOT_TOKEN"))

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

TG_HELLO_TEXT = """
–ü—Ä–∏–≤–µ—Ç!üëã

–Ø - –ú–∞—Ä–≥–æ, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–µ—Å–µ—Ä—á–µ –∏ –æ–±—É—á–µ–Ω–∏–∏. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:

–±—ã—Å—Ç—Ä–µ–µ —á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –≤ –Ω–∏—Ö –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
–Ω–∞—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ç–µ–±—è —Å—Ç–∞—Ç—å–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ –Ω–∞ —Å—Ö–µ–º–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ—á–µ—Ä–µ–¥–Ω–æ–π –Ω–æ–≤–µ–π—à–µ–π –º–æ–¥–µ–ª–∏
–∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∏–¥–µ–æ
–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏
...–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ
–ù–æ –ø–æ–∫–∞ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ –¥–µ–ª–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å—Ç–∞—Ç–µ–π –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
"""


# –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ArticleStates(StatesGroup):
    choosing_topic = State()
    asking_questions = State()
    select_paper = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(ArticleStates.choosing_topic)
    await message.answer(TG_HELLO_TEXT + "\n\n–ù–∞–ø–∏—à–∏, –∫–∞–∫—É—é —Ç–µ–º—É —Ç—ã —Ö–æ—á–µ—à—å –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å.")


@dp.message(ArticleStates.choosing_topic)
async def choose_topic(message: types.Message, state: FSMContext):
    async with aiohttp.ClientSession() as session:
        async with session.post(getenv("BACKEND_API_URL") + "/papers", json={"question": message.text}) as resp:
            topics = (await resp.json()).get("papers", [])

    if topics:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –≤ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(topics=topics)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º
        reply_text = "–Ø –Ω–∞—à–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n"
        for i, topic in enumerate(topics, start=1):
            reply_text += f"{i}. {topic['title']}\n"
        reply_text += "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."

        await message.answer(reply_text)
        await state.set_state(ArticleStates.select_paper)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.message(ArticleStates.select_paper, F.text.regexp(r"^\d+$"))
async def choose_article(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    topics = user_data.get("topics", [])

    article_index = int(message.text) - 1
    if 0 <= article_index < len(topics):
        chosen_article = topics[article_index]
        await state.update_data(chosen_article=chosen_article)

        await state.set_state(ArticleStates.asking_questions)
        await message.answer(
            f"–¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—å—é: {chosen_article['title']}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ."
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")


@dp.message(ArticleStates.asking_questions)
async def handle_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    chosen_article = user_data.get("chosen_article")

    if not chosen_article:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—å—é —Å–Ω–æ–≤–∞.")
        await state.set_state(ArticleStates.choosing_topic)
        return

    async with aiohttp.ClientSession() as session:
        async with session.post(
            getenv("BACKEND_API_URL"), json={"paper_url": chosen_article["paper_url"], "question": message.text}
        ) as resp:
            if resp.status == 200:
                answer_text = (await resp.json()).get("content", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")
                await message.answer(answer_text)
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
